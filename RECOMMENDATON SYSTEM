import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
data = {
    'Title': [
        'The Time Traveler‚Äôs Guide', 
        'Quantum Realities', 
        'Ancient Civilizations Explained', 
        'Python Programming 101', 
        'AI and the Human Mind'
    ],
    'Author': [
        'Ian Mortimer', 
        'Brian Cox', 
        'Graham Hancock', 
        'Goutham Ayyappa', 
        'Nick Bostrom'
    ],
    'Genre': [
        'History', 
        'Science', 
        'History', 
        'Tech', 
        'Tech'
    ],
    'Description': [
        'A historical tour through different eras', 
        'Exploring quantum theory for beginners', 
        'Decoding myths and legends of the past', 
        'Introductory guide to programming in Python', 
        'The ethical challenges posed by AI'
    ]
}
df = pd.DataFrame(data)
df['Combined'] = df['Author'] + ' ' + df['Genre'] + ' ' + df['Description']
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(df['Combined'])
similarity_matrix = cosine_similarity(tfidf_matrix)
def recommend_books(title, df, similarity_matrix):
    if title not in df['Title'].values:
        return "‚ùå Book not found. Try another title."
    
    index = df[df['Title'] == title].index[0]
    similarity_scores = list(enumerate(similarity_matrix[index]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    recommended_titles = [df['Title'][i[0]] for i in similarity_scores[1:4]]
    return recommended_titles
selected_title = "Python Programming 101"
recommendations = recommend_books(selected_title, df, similarity_matrix)

print(f"üìö Recommended books similar to '{selected_title}':")
for book in recommendations:
    print(f"‚Äì¬†{book}")
